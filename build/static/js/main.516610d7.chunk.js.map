{"version":3,"sources":["components/NotesList.js","graphql/mutations.js","AppHooks.js","graphql/queries.js","graphql/subscriptions.js","serviceWorker.js","aws-exports.js","index.js"],"names":["NotesList","_ref","notes","handleDeleteNote","handleSetNote","react_default","a","createElement","map","n","key","id","className","onClick","details","withAuthenticator","onCreateNoteListener","onDeleteNoteListener","onUpdateNoteListener","_useState","useState","_useState2","Object","slicedToArray","setId","_useState3","_useState4","setDetails","_useState5","_useState6","setNotes","getAllNotes","asyncToGenerator","regenerator_default","mark","_callee","initResult","wrap","_context","prev","next","API","graphql","graphqlOperation","sent","data","listNotes","items","stop","this","apply","arguments","useEffect","subscribe","noteData","newNote","value","onCreateNote","prevNotes","oldNotes","filter","concat","toConsumableArray","deletedNoteId","onDeleteNote","targetNoteId","onUpdateNote","targetIndex","findIndex","slice","unsubscribe","hasExistingNote","length","_ref3","_callee2","noteId","input","_context2","_x","updateNoteFunc","_ref4","_callee3","noteDetails","_context3","_x2","_x3","createNoteFromScratch","_ref5","_callee4","_context4","_x4","handleAddNote","_ref6","_callee5","e","_context5","preventDefault","alert","abrupt","_x5","onSubmit","type","placeholder","onChange","target","_ref2","includeGreetings","Boolean","window","location","hostname","match","awsmobile","aws_project_region","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","Amplify","configure","awsExports","ReactDOM","render","AppHooks","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.516610d7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction NotesList({ notes, handleDeleteNote, handleSetNote }) {\n  const localDeleteNote = id => {\n    handleDeleteNote(id);\n  };\n\n  const localSetNote = note => {\n    handleSetNote(note);\n  };\n\n  return (\n    <div>\n      {notes.map(n => (\n        <div key={n.id} className=\"flex items-center\">\n          <li\n            className=\"list pa1 f3\"\n            onClick={() => {\n              localSetNote(n);\n            }}\n          >\n            {n.details}\n          </li>\n          <button\n            className=\"bg-transparent bn f4\"\n            onClick={() => {\n              localDeleteNote(n.id);\n            }}\n          >\n            <span>&times;</span>\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nNotesList.propTypes = {\n  notes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      details: PropTypes.string.isRequired,\n    }).isRequired,\n  ),\n  handleDeleteNote: PropTypes.func.isRequired,\n  handleSetNote: PropTypes.func.isRequired,\n};\n\nexport { NotesList as default };\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = `mutation CreateNote($input: CreateNoteInput!) {\n  createNote(input: $input) {\n    id\n    details\n  }\n}\n`;\nexport const updateNote = `mutation UpdateNote($input: UpdateNoteInput!) {\n  updateNote(input: $input) {\n    id\n    details\n  }\n}\n`;\nexport const deleteNote = `mutation DeleteNote($input: DeleteNoteInput!) {\n  deleteNote(input: $input) {\n    id\n    details\n  }\n}\n`;\n","import React, { useEffect, useState } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport NotesList from './components/NotesList';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport {\n  onCreateNote,\n  onDeleteNote,\n  onUpdateNote,\n} from './graphql/subscriptions';\n\nconst App = () => {\n  const [id, setId] = useState('');\n  const [details, setDetails] = useState('');\n  const [notes, setNotes] = useState([]);\n\n  let onCreateNoteListener;\n  let onDeleteNoteListener;\n  let onUpdateNoteListener;\n\n  const subscribeToUpdateNote = () => {\n    onUpdateNoteListener = API.graphql(\n      graphqlOperation(onUpdateNote),\n    ).subscribe({\n      next: noteData => {\n        const { id: targetNoteId } = noteData.value.data.onUpdateNote;\n        setNotes(prevNotes => {\n          const targetIndex = prevNotes.findIndex(n => n.id === targetNoteId);\n          return [\n            ...prevNotes.slice(0, targetIndex),\n            noteData.value.data.onUpdateNote,\n            ...prevNotes.slice(targetIndex + 1),\n          ];\n        });\n        setDetails('');\n        setId('');\n      },\n    });\n  };\n\n  const subscribeToDeleteNote = () => {\n    onDeleteNoteListener = API.graphql(\n      graphqlOperation(onDeleteNote),\n    ).subscribe({\n      next: noteData => {\n        const { id: deletedNoteId } = noteData.value.data.onDeleteNote;\n        setNotes(prevNotes => prevNotes.filter(n => n.id !== deletedNoteId));\n      },\n    });\n  };\n\n  const subscribeToCreateNote = () => {\n    onCreateNoteListener = API.graphql(\n      graphqlOperation(onCreateNote),\n    ).subscribe({\n      next: noteData => {\n        const newNote = noteData.value.data.onCreateNote;\n        setNotes(prevNotes => {\n          const oldNotes = prevNotes.filter(n => n.id !== newNote.id);\n          return [...oldNotes, newNote];\n        });\n      },\n    });\n  };\n\n  const getAllNotes = async () => {\n    const initResult = await API.graphql(graphqlOperation(listNotes));\n    setNotes(initResult.data.listNotes.items);\n  };\n\n  useEffect(() => {\n    getAllNotes();\n    subscribeToCreateNote();\n    subscribeToDeleteNote();\n    subscribeToUpdateNote();\n\n    return () => {\n      onCreateNoteListener.unsubscribe();\n      onDeleteNoteListener.unsubscribe();\n      onUpdateNoteListener.unsubscribe();\n    };\n  }, []);\n\n  const hasExistingNote = () => {\n    if (id) {\n      return notes.filter(n => n.id === id).length > 0;\n    }\n    return false;\n  };\n\n  const handleSetNote = ({ id: noteId, details: noteDetails }) => {\n    setId(noteId);\n    setDetails(noteDetails);\n  };\n\n  const handleDeleteNote = async noteId => {\n    const input = {\n      id: noteId,\n    };\n    await API.graphql(\n      graphqlOperation(deleteNote, {\n        input,\n      }),\n    );\n  };\n\n  const handleChangeNote = e => {\n    setDetails(e.target.value);\n  };\n\n  const updateNoteFunc = async (noteId, noteDetails) => {\n    const input = {\n      id: noteId,\n      details: noteDetails,\n    };\n    await API.graphql(\n      graphqlOperation(updateNote, {\n        input,\n      }),\n    );\n  };\n\n  const createNoteFromScratch = async noteDetails => {\n    const input = {\n      details: noteDetails,\n    };\n    await API.graphql(graphqlOperation(createNote, { input }));\n    setDetails('');\n  };\n\n  const handleAddNote = async e => {\n    e.preventDefault();\n    if (!details) {\n      alert('Oops! Your note must include text.');\n      return;\n    }\n    // check if we have an existing note. If so, update it.\n    if (hasExistingNote()) {\n      // we have an existing note. Update it in the db.\n      await updateNoteFunc(id, details);\n    } else {\n      // create a new note.\n      await createNoteFromScratch(details);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-column items-center justify-center pa3 bg-washed-red\">\n      <h1 className=\"code f2-1\">Notetaker</h1>\n      <form onSubmit={handleAddNote} className=\"mb3\">\n        <input\n          type=\"text\"\n          className=\"pa2 f4\"\n          placeholder=\"Write your note.\"\n          onChange={handleChangeNote}\n          value={details}\n        />\n        <button className=\"pa2 f4\" type=\"submit\">\n          {hasExistingNote() ? <span>Update Note</span> : <span>Add Note</span>}\n        </button>\n      </form>\n      <NotesList\n        notes={notes}\n        handleDeleteNote={handleDeleteNote}\n        handleSetNote={handleSetNote}\n      />\n    </div>\n  );\n};\n\nexport default withAuthenticator(App, {\n  includeGreetings: true,\n});\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = `query GetNote($id: ID!) {\n  getNote(id: $id) {\n    id\n    details\n  }\n}\n`;\nexport const listNotes = `query ListNotes(\n  $filter: ModelNoteFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      details\n    }\n    nextToken\n  }\n}\n`;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = `subscription OnCreateNote {\n  onCreateNote {\n    id\n    details\n  }\n}\n`;\nexport const onUpdateNote = `subscription OnUpdateNote {\n  onUpdateNote {\n    id\n    details\n  }\n}\n`;\nexport const onDeleteNote = `subscription OnDeleteNote {\n  onDeleteNote {\n    id\n    details\n  }\n}\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile =  {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cognito_identity_pool_id\": \"us-east-2:69b8019b-4fbc-4d28-8e08-1d9452ab90bc\",\n    \"aws_cognito_region\": \"us-east-2\",\n    \"aws_user_pools_id\": \"us-east-2_2d4R06C4I\",\n    \"aws_user_pools_web_client_id\": \"dgcn25iefkkmufcbfkm46ddu2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://c47cl7iv3fac3iteba2sobpccu.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_content_delivery_bucket\": \"amplifynotetaker-20190124193538-hostingbucket\",\n    \"aws_content_delivery_bucket_region\": \"us-east-2\",\n    \"aws_content_delivery_url\": \"http://amplifynotetaker-20190124193538-hostingbucket.s3-website.us-east-2.amazonaws.com\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Amplify from 'aws-amplify';\nimport App from './AppHooks';\nimport * as serviceWorker from './serviceWorker';\nimport awsExports from './aws-exports';\n\nAmplify.configure(awsExports);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}